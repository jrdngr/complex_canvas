!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(2),a=r.PlotBounds.fromBounds(-10,10,-10,10),i=500,s=t=>t.exponent(2);function c(){const t=new r.DrawPlot(a,i,i);document.body.appendChild(t.canvas);const e=function(t,e,n=100){const a=s(o.Complex.fromRectangular(e.xMin,e.yMin)),i=s(o.Complex.fromRectangular(e.xMax,e.yMax));let c=a.re,u=i.re,l=a.im,d=i.im;const h=e.xRange/n,m=e.yRange/n;for(let t=e.xMin;t<e.xMax;t+=h)for(let n=e.yMin;n<e.yMax;n+=m){const e=s(o.Complex.fromRectangular(t,n));c=Math.min(e.re,c),u=Math.max(e.re,u),l=Math.min(e.im,l),d=Math.max(e.im,d)}return r.PlotBounds.fromBounds(c,u,l,d)}(0,a),n=new r.DrawPlot(e,i,i);document.body.appendChild(n.canvas);let c=!1;t.canvas.addEventListener("pointerdown",function(e){c=!0;const[r,a]=u(e);t.beginPath(r,a);const i=s(o.Complex.fromRectangular(r,a));n.beginPath(i.re,i.im)}),t.canvas.addEventListener("pointerup",function(e){c=!1;const[r,a]=u(e);t.endPath(r,a);const i=s(o.Complex.fromRectangular(r,a));n.endPath(i.re,i.im)}),t.canvas.addEventListener("pointerleave",function(e){c=!1;const[r,a]=u(e);t.endPath(r,a);const i=s(o.Complex.fromRectangular(r,a));n.endPath(i.re,i.im)}),t.canvas.addEventListener("pointermove",function(e){if(c){const[r,a]=u(e);t.addPoint(r,a);const i=s(o.Complex.fromRectangular(r,a));n.addPoint(i.re,i.im)}})}function u(t){return[a.xMin+t.pageX/i*a.xRange,a.yMin+t.pageY/i*a.yRange]}e.main=c,c()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e,n,r){this.xMin=t,this.xMax=e,this.yMin=n,this.yMax=r,this.xRange=e-t,this.yRange=r-n}static fromBounds(t,e,n,o){return new r(t,e,n,o)}static fromZero(t,e){return new r(0,t,0,e)}static symmetric(t,e){return new r(-t,t,-e,e)}transform(t){return t(this)}}e.PlotBounds=r;e.DrawPlot=class{constructor(t,e,n){this.bounds=t,this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=n,this.context=this.canvas.getContext("2d")}beginPath(t,e){const[n,r]=this.getCanvasCoordinates(t,e);this.context.beginPath(),this.context.moveTo(n,r)}endPath(t,e){const[n,r]=this.getCanvasCoordinates(t,e);this.context.closePath()}addPoint(t,e){const[n,r]=this.getCanvasCoordinates(t,e);this.context.lineTo(n,r),this.context.stroke()}getCanvasCoordinates(t,e){return[this.canvas.width*(t-this.bounds.xMin)/this.bounds.xRange,this.canvas.height*(e-this.bounds.yMin)/this.bounds.yRange]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e){this.re=t,this.im=e,this.r=Math.sqrt(Math.pow(t,2)+Math.pow(e,2)),this.theta=Math.atan2(e,t)}static zero(){return r.fromRectangular(0,0)}static unit(){return r.fromRectangular(1,0)}static fromRectangular(t,e){return new r(t,e)}static fromPolar(t,e){const n=t*Math.cos(e),o=t*Math.sin(e);return new r(n,o)}static fromComplex(t){return r.fromRectangular(t.re,t.im)}static add(t,e){return r.fromRectangular(t.re+e.re,t.im+e.im)}static subtract(t,e){return r.fromRectangular(t.re-e.re,t.im-e.im)}static multiply(t,e){return r.fromPolar(t.r*e.r,t.theta-e.theta)}static divide(t,e){return r.fromPolar(t.r/e.r,t.theta-e.theta)}static exponent(t,e){const n=Math.pow(t.r,e),o=n*Math.cos(e*t.theta),a=n*Math.sin(e*t.theta);return r.fromRectangular(o,a)}static root(t,e){return r.exponent(t,1/e)}clone(){return r.fromComplex(this)}add(t){return r.add(this,t)}subtract(t){return r.subtract(this,t)}multiply(t){return r.multiply(this,t)}divide(t){return r.divide(this,t)}exponent(t){return r.exponent(this,t)}root(t){return r.root(this,t)}toString(){return`${this.re} + ${this.im}i`}}e.Complex=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,