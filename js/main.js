!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),i=n(2),o=r.PlotBounds.fromBounds(-10,10,-10,10),s=500,a=t=>t.exponent(2);function u(){const t=new r.DrawPlot(o,s,s);document.body.appendChild(t.canvas);const e=function(t,e,n=100){const o=a(i.Complex.fromRectangular(e.xMin,e.yMin)),s=a(i.Complex.fromRectangular(e.xMax,e.yMax));let u=o.re,c=s.re,h=o.im,l=s.im;const g=e.xRange/n,d=e.yRange/n;for(let t=e.xMin;t<e.xMax;t+=g)for(let n=e.yMin;n<e.yMax;n+=d){const e=a(i.Complex.fromRectangular(t,n));u=Math.min(e.re,u),c=Math.max(e.re,c),h=Math.min(e.im,h),l=Math.max(e.im,l)}return r.PlotBounds.fromBounds(u,c,h,l)}(0,o),n=new r.ShaderPlot(e,s,s);document.body.appendChild(n.canvas),t.subscribe(n)}e.main=u,u()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e,n,r){this.xMin=t,this.xMax=e,this.yMin=n,this.yMax=r,this.xRange=e-t,this.yRange=r-n}static fromBounds(t,e,n,i){return new r(t,e,n,i)}static fromZero(t,e){return new r(0,t,0,e)}static symmetric(t,e){return new r(-t,t,-e,e)}transform(t){return t(this)}}e.PlotBounds=r;e.DrawPlot=class{constructor(t,e,n){this.isMouseDown=!1,this.updateSubscriptions=[],this.bounds=t,this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=n,this.context=this.canvas.getContext("2d");const r=this;this.canvas.addEventListener("mousedown",function(t){r.onMouseDown(t.pageX,t.pageY)}),this.canvas.addEventListener("mouseup",function(t){r.onMouseUp(t.pageX,t.pageY)}),this.canvas.addEventListener("mousemove",function(t){r.onMouseMove(t.pageX,t.pageY)}),this.canvas.addEventListener("mouseleave",function(t){r.onMouseUp(t.pageX,t.pageY)})}subscribe(t){this.updateSubscriptions.push(t)}onMouseDown(t,e){this.isMouseDown=!0,this.context.beginPath(),this.context.moveTo(t,e)}onMouseUp(t,e){this.onMouseMove(t,e),this.context.closePath(),this.isMouseDown=!1}onMouseMove(t,e){this.isMouseDown&&(this.context.lineTo(t,e),this.context.stroke(),this.updateSubscriptions.forEach(t=>{t.update(this.canvas)}))}};e.ShaderPlot=class{constructor(t,e,n){this.bounds=t,this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=n,this.gl=this.canvas.getContext("webgl",{antialias:!1,preserveDrawingBuffer:!0}),this.configureGl()}configureGl(){const t=this.createShader(i,this.gl.VERTEX_SHADER),e=this.createShader(o,this.gl.FRAGMENT_SHADER),n=this.gl.createProgram();this.gl.attachShader(n,t),this.gl.attachShader(n,e),this.gl.linkProgram(n),this.gl.useProgram(n);const r=this.gl.getUniformLocation(n,"u_color"),s=this.gl.getAttribLocation(n,"a_position"),a=this.gl.getUniformLocation(n,"u_resolution");this.gl.uniform2f(a,this.canvas.width,this.canvas.height);const u=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,u),this.gl.enableVertexAttribArray(s),this.gl.vertexAttribPointer(s,2,this.gl.FLOAT,!1,0,0),this.gl.uniform4f(r,0,0,0,1),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}createShader(t,e){const n=this.gl.createShader(e);return this.gl.shaderSource(n,t),this.gl.compileShader(n),n}update(t){let e=this.gl.createTexture();this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t);var n=this.gl.createFramebuffer();this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,n),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,e,0)}};const i="\nattribute vec2 a_position;\nuniform vec2 u_resolution;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0, 1);\n}",o="\nprecision mediump float;\nuniform vec4 u_color;\n\nvoid main() {\n  gl_FragColor = u_color;\n}"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e){this.re=t,this.im=e,this.r=Math.sqrt(Math.pow(t,2)+Math.pow(e,2)),this.theta=Math.atan2(e,t)}static zero(){return r.fromRectangular(0,0)}static unit(){return r.fromRectangular(1,0)}static fromRectangular(t,e){return new r(t,e)}static fromPolar(t,e){const n=t*Math.cos(e),i=t*Math.sin(e);return new r(n,i)}static fromComplex(t){return r.fromRectangular(t.re,t.im)}static add(t,e){return r.fromRectangular(t.re+e.re,t.im+e.im)}static subtract(t,e){return r.fromRectangular(t.re-e.re,t.im-e.im)}static multiply(t,e){return r.fromPolar(t.r*e.r,t.theta-e.theta)}static divide(t,e){return r.fromPolar(t.r/e.r,t.theta-e.theta)}static exponent(t,e){const n=Math.pow(t.r,e),i=n*Math.cos(e*t.theta),o=n*Math.sin(e*t.theta);return r.fromRectangular(i,o)}static root(t,e){return r.exponent(t,1/e)}clone(){return r.fromComplex(this)}add(t){return r.add(this,t)}subtract(t){return r.subtract(this,t)}multiply(t){return r.multiply(this,t)}divide(t){return r.divide(this,t)}exponent(t){return r.exponent(this,t)}root(t){return r.root(this,t)}toString(){return`${this.re} + ${this.im}i`}}e.Complex=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,