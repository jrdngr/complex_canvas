!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1),o=n(2),i=r.PlotBounds.fromBounds(-10,10,-10,10),a=500,s=t=>t.exponent(2);function c(){const t=new r.Plot(i,a,a);document.body.appendChild(t.canvas);const e=function(t,e,n=100){const i=s(o.Complex.fromRectangular(e.xMin,e.yMin)),a=s(o.Complex.fromRectangular(e.xMax,e.yMax));let c=i.re,u=a.re,l=i.im,h=a.im;const d=e.xRange/n,f=e.yRange/n;for(let t=e.xMin;t<e.xMax;t+=d)for(let n=e.yMin;n<e.yMax;n+=f){const e=s(o.Complex.fromRectangular(t,n));c=Math.min(e.re,c),u=Math.max(e.re,u),l=Math.min(e.im,l),h=Math.max(e.im,h)}return console.log(r.PlotBounds.fromBounds(c,u,l,h)),r.PlotBounds.fromBounds(c,u,l,h)}(0,i),n=new r.Plot(e,a,a);document.body.appendChild(n.canvas);let c=!1;t.canvas.addEventListener("mousedown",function(t){c=!0}),t.canvas.addEventListener("mouseup",function(t){c=!1}),t.canvas.addEventListener("mousemove",function(e){if(c){const r=e.pageX,a=t.canvas.height-e.pageY,c=i.xMin+r/t.canvas.width*i.xRange,u=i.yMin+a/t.canvas.height*i.yRange;t.addPoint(c,u);const l=s(o.Complex.fromRectangular(c,u));n.addPoint(l.re,l.im)}})}e.main=c,c()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e,n,r){this.xMin=t,this.xMax=e,this.yMin=n,this.yMax=r,this.xRange=e-t,this.yRange=r-n}static fromBounds(t,e,n,o){return new r(t,e,n,o)}static fromZero(t,e){return new r(0,t,0,e)}static symmetric(t,e){return new r(-t,t,-e,e)}transform(t){return t(this)}}e.PlotBounds=r;e.Plot=class{constructor(t,e,n){this.bounds=t,this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=n,this.canvas.id="canvas",this.gl=this.canvas.getContext("webgl",{antialias:!1,preserveDrawingBuffer:!0}),this.configureGl()}addPoint(t,e){if(this.isPointOnPlot(t,e)){const n=(t-this.bounds.xMin)/this.bounds.xRange,r=(e-this.bounds.yMin)/this.bounds.yRange,o=n*this.canvas.width,i=r*this.canvas.height;this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([o,i]),this.gl.STATIC_DRAW),this.gl.drawArrays(this.gl.POINTS,0,1)}}isPointOnPlot(t,e){return t>=this.bounds.xMin&&t<=this.bounds.xMax&&e>=this.bounds.yMin&&e<=this.bounds.yMax}configureGl(){const t=this.createShader(o,this.gl.VERTEX_SHADER),e=this.createShader(i,this.gl.FRAGMENT_SHADER),n=this.gl.createProgram();this.gl.attachShader(n,t),this.gl.attachShader(n,e),this.gl.linkProgram(n),this.gl.useProgram(n);const r=this.gl.getUniformLocation(n,"u_color"),a=this.gl.getAttribLocation(n,"a_position"),s=this.gl.getUniformLocation(n,"u_resolution");this.gl.uniform2f(s,this.canvas.width,this.canvas.height);const c=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,c),this.gl.enableVertexAttribArray(a),this.gl.vertexAttribPointer(a,2,this.gl.FLOAT,!1,0,0),this.gl.uniform4f(r,0,0,0,1),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}createShader(t,e){const n=this.gl.createShader(e);return this.gl.shaderSource(n,t),this.gl.compileShader(n),n}};const o="\nattribute vec2 a_position;\nuniform vec2 u_resolution;\n\nvoid main() {\n  // convert the rectangle from pixels to 0.0 to 1.0\n    vec2 zeroToOne = a_position / u_resolution;\n\n    // convert from 0 -> 1 to 0 -> 2\n    vec2 zeroToTwo = zeroToOne * 2.0;\n\n    // convert from 0 -> 2 to -1 -> +1 (clipspace)\n    vec2 clipSpace = zeroToTwo - 1.0;\n\n    gl_PointSize = 1.0;\n    gl_Position = vec4(clipSpace * vec2(1, 1), 0, 1);\n}",i="\nprecision mediump float;\nuniform vec4 u_color;\n\nvoid main() {\n  gl_FragColor = u_color;\n}"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class r{constructor(t,e){this.re=t,this.im=e,this.r=Math.sqrt(Math.pow(t,2)+Math.pow(e,2)),this.theta=Math.atan2(e,t)}static zero(){return r.fromRectangular(0,0)}static unit(){return r.fromRectangular(1,0)}static fromRectangular(t,e){return new r(t,e)}static fromPolar(t,e){const n=t*Math.cos(e),o=t*Math.sin(e);return new r(n,o)}static fromComplex(t){return r.fromRectangular(t.re,t.im)}static add(t,e){return r.fromRectangular(t.re+e.re,t.im+e.im)}static subtract(t,e){return r.fromRectangular(t.re-e.re,t.im-e.im)}static multiply(t,e){return r.fromPolar(t.r*e.r,t.theta-e.theta)}static divide(t,e){return r.fromPolar(t.r/e.r,t.theta-e.theta)}static exponent(t,e){const n=Math.pow(t.r,e),o=n*Math.cos(e*t.theta),i=n*Math.sin(e*t.theta);return r.fromRectangular(o,i)}static root(t,e){return r.exponent(t,1/e)}clone(){return r.fromComplex(this)}add(t){return r.add(this,t)}subtract(t){return r.subtract(this,t)}multiply(t){return r.multiply(this,t)}divide(t){return r.divide(this,t)}exponent(t){return r.exponent(this,t)}root(t){return r.root(this,t)}toString(){return`${this.re} + ${this.im}i`}}e.Complex=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,